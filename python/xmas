#!/usr/bin/env ipython3
import time
import random
import opc
import colorsys
import color_utils
import math

ADDRESS = 'localhost:7890'



class Strand:
	def __init__(self, size, brightness=1):
		self._pixels = [(0,0,0)] * size
		self._client = opc.Client(ADDRESS)
		self.brightness = brightness


	def __len__(self):
		return len(self._pixels)

	def __getitem__(self, idx):
		return self._pixels[idx]

	def __setitem__(self, idx, value):
		self._pixels[idx] = value

	def push(self):
		intPixels = [ (int(p[1]*255*self.brightness), int(p[0]*255*self.brightness), int(p[2]*255*self.brightness)) for p in self._pixels]
		self._client.put_pixels(intPixels, channel=0)

	def clear(self):
		for i in range(len(self)):
			self[i] = (0,0,0)


def scaleColor(scale, color):
	return tuple(scale*comp for comp in color)


def mapsin(x, minx, maxx, ncycles):
	x -= minx
	x /= (maxx - minx)
	x *= 2*math.pi * ncycles
	x -= math.pi/2
	x = math.sin(x)
	x += 1
	x /= 2
	return x


def mappower(x, minx, maxx, power):
	x -= minx
	x /= (maxx - minx)
	x **= power
	return x



def colorWheel(x):
	return colorsys.hsv_to_rgb(x, 1, 1)

def redBlue(x):
	if x < 0.5: 
		return (1,0,0)
	return (0,0,1)

def redBlueBlack(x):
	colors = [(0,0,0), (1,0,0), (0,0,0), (0,0,1)]
	return colors[ int(x*len(colors)) ]


def allWhite(x):
	return (1,1,1)

def allYellow(x):
	return (1,1,0.5)

def lowSat(x):
	return colorsys.hsv_to_rgb(x, 0.5, 1)


class Pattern:
	def __init__(self, strand, palette):
		self._time = 0
		self._strand = strand
		self._palette = palette
		self._delta = 0

	def _update(self):
		assert False

	def process(self, delta):
		self._time += delta
		self._delta = delta
		self._update()
		self._strand.push()



class FadeIn(Pattern):
	def __init__(self, strand, palette, period):
		super().__init__(strand, palette)
		self._period = period
		self._curColor = (1,0,0)

	def _update(self):
		if self._time > self._period:
			self._time -= self._period
			self._curColor = self._palette(random.random())

		scale = mappower(self._time/self._period, 0, 1, 0.5)

		for i in range(len(self._strand)):
			strand[i] = scaleColor(scale, self._curColor)


			
class FadeOut(Pattern):
	def __init__(self, strand, palette, period):
		super().__init__(strand, palette)
		self._period = period
		self._curColor = (1,0,0)

	def _update(self):
		if self._time > self._period:
			self._time -= self._period
			self._curColor = self._palette(random.random())
		
		scale = mappower(self._time/self._period, 1, 0, 0.5)

		for i in range(len(self._strand)):
			strand[i] = scaleColor(scale, self._curColor)


class FadeInOut(Pattern):
	def __init__(self, strand, palette, period):
		super().__init__(strand, palette)
		self._period = period
		self._curColor = (1,0,0)

	def _update(self):
		if self._time > self._period:
			self._time -= self._period
			self._curColor = self._palette(random.random())


		scale = None
		if self._time < (self._period/2):
			# scale = self._time/(self._period/2)
			scale = mappower(self._time/self._period, 0, 0.5, 0.5)
		else:
			# scale = color_utils.remap(self._time, self._period/2, self._period, 1, 0)
			scale = mappower(self._time/self._period, 1, 0.5, 0.5)

		for i in range(len(self._strand)):
			strand[i] = tuple(comp * (scale) for comp in self._curColor)



class MovingRainbow(Pattern):
	def __init__(self, strand, palette, period, ncycles):
		super().__init__(strand, palette)
		self._period = period
		self._ncycles = ncycles

	def _update(self):
		offset = self._time/self._period
		for i in range(len(self._strand)):
			strand[i] = self._palette((offset + (i*self._ncycles)/len(self._strand)) % 1)




class Trail(Pattern):
	def __init__(self, strand, palette, nheads, moveperiod, colorperiod, initdecay, decay):
		super().__init__(strand, palette)
		self._nheads = nheads
		self._moveperiod = moveperiod
		self._colorperiod = colorperiod
		self._decay = decay
		self._initdecay = initdecay
		self._prevheads = [0] * nheads	
	


	def _update(self):
		basehead = int(len(self._strand) * self._time/self._moveperiod) % len(self._strand)
		heads = []
		for n in range(self._nheads):
			heads.append( (basehead + n*len(self._strand) // self._nheads) % len(self._strand) )



		curColor = self._palette((self._time / self._colorperiod) % 1)

		for i in range(len(self._strand)):
			if i in heads:
				strand[i] = (1,1,1)
			elif i in self._prevheads: # just changed since prevhead != head
				strand[i] = scaleColor(self._initdecay, curColor)
			else:
				strand[i] = scaleColor(self._decay, strand[i])

		self._prevheads = heads[:]



			
class Flicker(Pattern):
	def __init__(self, strand, palette, period, ontime):
		super().__init__(strand, palette)
		self._period = period
		self._ontime = ontime
		self._phases = [random.random()*period for _ in range(len(strand))]

	def _update(self):
		for i in range(len(self._strand)):
			self._phases[i] += self._delta
			self._phases[i] %= self._period
			if self._phases[i] < self._ontime:
				self._strand[i] = scaleColor(mapsin(self._phases[i], 0, self._ontime, 5), self._palette(random.Random(i).random()))
			else:
				self._strand[i] = (0,0,0)

	



if __name__ == '__main__':
	strand = Strand(255, 0.3)

	# for i in range(len(strand)):
	# 	strand[i] = (1,0,0)

	# strand.push()


	targetFPS = 100
	targetDelta = 1/targetFPS


	patterns = [
		(10, FadeIn(strand, colorWheel, 2)),
		(10, FadeOut(strand, colorWheel, 2)),
		(10, FadeInOut(strand, colorWheel, 3)),
		(10, MovingRainbow(strand, colorWheel, 10, len(strand))), # uniform rainbow
		(10, MovingRainbow(strand, colorWheel, 3, 2) ),
		(10, MovingRainbow(strand, redBlue, 0.3, len(strand)/6) ),
		(10, Trail(strand, lambda x:  (1,0,0), 2, 9, 3, 1, 0.995)),
		(10, Flicker(strand, colorWheel, 5, 1)),
		(10, Flicker(strand, allYellow, 15, 4)),
		(10, Flicker(strand, lowSat, 5, 1)),

		
		
	]

	timePerPattern = 100000

	# fadeIn = FadeOut(strand, 3)



	patternIdx = 0
	patternTimeRemaining, curPattern = patterns[patternIdx]

	frameCnt = 0
	frameCntTimer = 0
	frameCntPeriod = 1

	prevTime = time.time()
	while True:
		delta = time.time() - prevTime
		prevTime += delta

		curPattern.process(targetDelta)
		frameCnt += 1
		frameCntTimer += delta

		if frameCntTimer >= frameCntPeriod:
			print('FPS: {}'.format(frameCnt/ frameCntTimer))
			frameCnt = 0
			frameCntTimer = 0
			# print('detla,', delta)

		patternTimeRemaining -= delta
		if patternTimeRemaining <= 0:
			strand.clear()
			patternTimeRemaining, curPattern = patterns[patternIdx]
			patternIdx = (patternIdx+1) % len(patterns)


		nextFrameAt = prevTime + 0.01
		sleepTime =  nextFrameAt - time.time()
		if sleepTime > 0:
			time.sleep(sleepTime)




	

	